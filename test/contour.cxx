// generated by Fast Light User Interface Designer (fluid) version 1.0300

#include "../test/contour.h"
static TMatrix<gm_real> d; 
static const char * f; 
static char file_[128]; 
static char file_name_[32]; 
static char submesh_file_[128]; 
static char submesh_file_name_[32]; 
static char directory_[128]; 

static Fl_Double_Window *_wcnt=(Fl_Double_Window *)0;

fl_gl_contour *ct3=(fl_gl_contour *)0;

Fl_Slider *sc=(Fl_Slider *)0;

static void cb_sc(Fl_Slider*, void*) {
  ct3->scale(sc->value());
ct3->redraw();
}

Fl_Slider *_z=(Fl_Slider *)0;

static void cb__z(Fl_Slider*, void*) {
  ct3->zoom(_z->value());
ct3->redraw();
}

static void cb_fileopen(Fl_Button*, void*) {
  //
  Fl_File_Chooser *p = new Fl_File_Chooser(directory_,"*.xyz",1,"Select file");
  p->directory(directory_);
  p->show();
  while( p->visible())
	  Fl::wait();
  if(p->value()){
    strcpy(file_,p->value());
    strcpy(directory_,p->directory());
    f = fl_filename_name(p->value());
    strcpy(file_name_,f);
    _xyz_file->value(file_name_);
    button_data->activate();
  };
}

Fl_Button *button_data=(Fl_Button *)0;

static void cb_button_data(Fl_Button*, void*) {
  //
  load_xyz_data();
  button_graph->activate();
  control_panel->activate();
}

#include <FL/Fl_Pixmap.H>
static const char *idata_data[] = {
"40 28 2 1",
" \tc None",
".\tc #000000",
"                                        ",
"                                        ",
". . ... . . . . ... . . ... ...  ..  .. ",
". . .   . . . . .   . . .     . .   . . ",
"... ..  ... ... ..  ... ..   .  ..   .  ",
"  .   .   .   .   .   .   .   . . . . . ",
"  . ..    .   . ..    . ..  ..   .  ..  ",
"                                        ",
" .   .  . . . . ... . .  .   .  . . ... ",
". . . . . . . . .   . . . . . . . . .   ",
"... ... ... ... ..  ... ...  .. ... ..  ",
". . . .   .   .   .   . . .   .   .   . ",
" .   .    .   . ..    .  .  ..    . ..  ",
"                                        ",
" ..  .. ...  .  ...  ..  .. ... ...  .. ",
". . .     . ..    . . . . .   .   . . . ",
" .  ..   .   .   .   .   .   .   .   .  ",
". . . .   .  .    . . . . .   . .   . . ",
"..   .  ..  ... ..  ..  ..  ..  .   ..  ",
"                                        ",
" .   .. ...  .   .   .  ... . .  .. . . ",
". . . .   . . . . . . . .   . . .   . . ",
" ..  .   .   ..  ..  .. ..  ... ..  ... ",
"  . . . .     .   .   .   .   . . .   . ",
"..  ..  .   ..  ..  ..  ..    .  .    . ",
"                                        ",
"                                        ",
"                                        "
};
static Fl_Pixmap image_data(idata_data);

Fl_Button *button_graph=(Fl_Button *)0;

static void cb_button_graph(Fl_Button*, void*) {
  //
  _chk_cut->activate();
  build_graph();
}

static const char *idata_contour[] = {
"44 24 9 1",
" \tc None",
".\tc #F1661A",
"+\tc #000000",
"@\tc #F4F112",
"#\tc #12F417",
"$\tc #1247F4",
"%\tc #E112F4",
"&\tc #F41257",
"*\tc #F45D12",
".....++@@@@@@@@@@@@@@@@@@@@@@@@@@@@@+++.....",
"....++@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@++++..",
"....+@@@@@@@+++++++++++++@@@@@@@@@@@@@@@@++.",
"...++@@@@++++###########++++++++@@@@@@@@@@@+",
"..++@@@@++#####################+++@@@@@@@@@+",
".++@@@@@+########################++@@@@@@@@@",
"++@@@@@++####+++++++++############++@@@@@@@@",
"+@@@@@@+####+$$$$$$$$$+++###########+@@@@@@@",
"+@@@@@@+###++$$$$$$$$$$$$+++########++@@@@@@",
"@@@@@@@+##++$$$$$$$$$$$$$$$$+++#######+@@@@@",
"@@@@@@+###+$$$$$$$$+++++++$$$$+++#####+@@@@@",
"@@@@@@+###+$$$$$++++%%%%%++++$$$+#####+@@@@@",
"@@@@@+###++$$$$++%%%%%%%%%%%%++$++#####+@@@@",
"@@@+++###+$$$$++%%%%%++%%%%%%%+$$++####+@@@@",
"++++#####+$$$++%%%%++&+++%%%%%++$$+####+@@@@",
"########++$$$+%%%%++&&&&++%%%%%+$$+####+@@@@",
"########+$$++%%%%+&&&&&&&+%%%%%+$$+####+@@@@",
"######+++$$+%%%%++&&&&&&&+%%%%%+$$+####+@@@+",
"+++++++$$$++%%%%+&&&&&&&&+%%%%++$$+####+@@@+",
"$$$$$$$$$$+%%%%%+&&&&&&&++%%%%+$$++###++@@++",
"$$$$$$$$$+%%%%%%+&&&&&&&+%%%%++$++####+@@@+*",
"$$$$$$$$++%%%%%%+&&&&&&++%%%++ ++####++@@++*",
"$$$$$$$$+%%%%%%%++++++++%%+++ ++####++@@@+**",
"$$$$$$$+%%%%%%%%%%%%%%%%++    +#####+@@@@+**"
};
static Fl_Pixmap image_contour(idata_contour);

Fl_Input *_xyz_file=(Fl_Input *)0;

Fl_Tabs *control_panel=(Fl_Tabs *)0;

Fl_Choice *ip=(Fl_Choice *)0;

static void cb_ip(Fl_Choice*, void*) {
  //
  ct3->intp_method((int)ip->value());
  //printf("interpolation = %i",ip->value());
  ct3->graph_cb();
}

static void cb_overall(Fl_Menu_*, void*) {
  //
  ct3->intp_method((int)ip->value());
  //printf("val = %i",ip->value());
  ct3->graph_cb();
}

static void cb_nearest(Fl_Menu_*, void*) {
  //
  ct3->intp_method((int)ip->value());
  //printf("val = %i",ip->value());
  ct3->graph_cb();
}

static void cb_Linear(Fl_Menu_*, void*) {
  //
  ct3->intp_method((int)ip->value());
  //printf("val = %i",ip->value());
  ct3->graph_cb();
}

Fl_Menu_Item menu_ip[] = {
 {"overall", 0,  (Fl_Callback*)cb_overall, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"nearest", 0,  (Fl_Callback*)cb_nearest, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Linear", 0,  (Fl_Callback*)cb_Linear, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

Fl_Choice *pt=(Fl_Choice *)0;

static void cb_pt(Fl_Choice*, void*) {
  //
  //ct3->color_palette((int)pt->value());
  //rintf("Palette = %i",(int)pt->value());
  //ct3->graph_cb();
}

static void cb_Gray(Fl_Menu_*, void*) {
  //
  ct3->set_palette((int)pt->value());
  //printf("Palette = %i",pt->value());
  ct3->graph_cb();
}

static void cb_Terrain(Fl_Menu_*, void*) {
  //
  ct3->set_palette((int)pt->value());
  //printf("Palette = %i",pt->value());
  ct3->graph_cb();
}

static void cb_Earth(Fl_Menu_*, void*) {
  //
  ct3->set_palette((int)pt->value());
  //printf("Palette = %i",pt->value());
  ct3->graph_cb();
}

static void cb_Hsv(Fl_Menu_*, void*) {
  //
  ct3->set_palette((int)pt->value());
  //printf("Palette = %i",pt->value());
  ct3->graph_cb();
}

static void cb_Rgb(Fl_Menu_*, void*) {
  //
  ct3->set_palette((int)pt->value());
  //printf("Palette = %i",pt->value());
  ct3->graph_cb();
}

Fl_Menu_Item menu_pt[] = {
 {"Gray", 0,  (Fl_Callback*)cb_Gray, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Terrain", 0,  (Fl_Callback*)cb_Terrain, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Earth", 0,  (Fl_Callback*)cb_Earth, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Hsv", 0,  (Fl_Callback*)cb_Hsv, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Rgb", 0,  (Fl_Callback*)cb_Rgb, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

Fl_Value_Input *gx=(Fl_Value_Input *)0;

static void cb_gx(Fl_Value_Input*, void*) {
  ct3->set_number_x_grid((int)gx->value());
ct3->actualize();
}

Fl_Value_Input *gy=(Fl_Value_Input *)0;

static void cb_gy(Fl_Value_Input*, void*) {
  ct3->set_number_y_grid((int)gy->value());
ct3->actualize();
}

Fl_Value_Input *lv=(Fl_Value_Input *)0;

static void cb_lv(Fl_Value_Input*, void*) {
  ct3->set_number_z_grid((int)lv->value());
//ct3->actualize();
}

Fl_Check_Button *_bx_d=(Fl_Check_Button *)0;

static void cb__bx_d(Fl_Check_Button*, void*) {
  //
  ct3->graph_box((bool)_bx_d->value());
  ct3->redraw();
}

Fl_Check_Button *_ch_pl=(Fl_Check_Button *)0;

static void cb__ch_pl(Fl_Check_Button*, void*) {
  //
  ct3->graph_pal((bool)_ch_pl->value());
  ct3->redraw();
}

Fl_Check_Button *_ch_d=(Fl_Check_Button *)0;

static void cb__ch_d(Fl_Check_Button*, void*) {
  //
  ct3->graph_dat((bool)_ch_d->value());
  ct3->redraw();
}

Fl_Check_Button *_ch_sp=(Fl_Check_Button *)0;

static void cb__ch_sp(Fl_Check_Button*, void*) {
  //
  ct3->graph_mpt((bool)_ch_sp->value());
  ct3->redraw();
}

Fl_Check_Button *_btt_2d=(Fl_Check_Button *)0;

static void cb__btt_2d(Fl_Check_Button*, void*) {
  //
  if((bool)_btt_2d->value())
    g2d->activate();
  else g2d->deactivate();
  ct3->graph_2d((bool)_btt_2d->value());
  ct3->redraw();
}

Fl_Check_Button *_btt_3d=(Fl_Check_Button *)0;

static void cb__btt_3d(Fl_Check_Button*, void*) {
  //
  if((bool)_btt_2d->value())
    g3d->activate();
  else g3d->deactivate();
  ct3->graph_3d((bool)_btt_3d->value());
  ct3->redraw();
}

Fl_Choice *g2d=(Fl_Choice *)0;

static void cb_g2d(Fl_Choice*, void*) {
  //
  ct3->graph_2d((int)g2d->value());
  //printf("type = %i",g->value());
  ct3->graph_cb();
}

Fl_Menu_Item menu_g2d[] = {
 {"Mesh", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Contour", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Color", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Contour-Color", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

Fl_Choice *g3d=(Fl_Choice *)0;

static void cb_g3d(Fl_Choice*, void*) {
  //
  ct3->graph_3d((int)g3d->value());
  //printf("type = %i",g->value());
  ct3->graph_cb();
}

Fl_Menu_Item menu_g3d[] = {
 {"Mesh", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Contour", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Color", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Contour-Color", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

Fl_Check_Button *_chk_avg=(Fl_Check_Button *)0;

static void cb__chk_avg(Fl_Check_Button*, void*) {
  //
  ct3->actualize();
  ct3->set_average_duplicated((bool)_chk_avg->value());
  _chk_del->value(false);
  ct3->set_remove_duplicated((bool)_chk_del->value());
  //ct3->graph_cb();
  //ct3->redraw();
}

Fl_Check_Button *_chk_del=(Fl_Check_Button *)0;

static void cb__chk_del(Fl_Check_Button*, void*) {
  //
  ct3->actualize();
  ct3->set_remove_duplicated((bool)_chk_del->value());
  _chk_avg->value(false);
  ct3->set_average_duplicated((bool)_chk_avg->value());
  //ct3->graph_cb();
  //ct3->redraw();
}

Fl_Value_Input *_tol=(Fl_Value_Input *)0;

static void cb__tol(Fl_Value_Input*, void*) {
  //
  ct3->actualize();
  ct3->set_duplicated_tolerance((real)_tol->value());
  ct3->redraw();
}

Fl_Value_Input *gx1=(Fl_Value_Input *)0;

static void cb_gx1(Fl_Value_Input*, void*) {
  //ct3->numxcells((int)gx->value());
//ct3->actualize();
}

Fl_Value_Input *gy1=(Fl_Value_Input *)0;

static void cb_gy1(Fl_Value_Input*, void*) {
  //ct3->numycells((int)gy->value());
//ct3->actualize();
}

Fl_Value_Input *gz1=(Fl_Value_Input *)0;

static void cb_gz1(Fl_Value_Input*, void*) {
  //ct3->numlevels((int)lv->value());
//ct3->actualize();
}

Fl_Value_Input *gx2=(Fl_Value_Input *)0;

static void cb_gx2(Fl_Value_Input*, void*) {
  //ct3->numxcells((int)gx->value());
//ct3->actualize();
}

Fl_Value_Input *gy2=(Fl_Value_Input *)0;

static void cb_gy2(Fl_Value_Input*, void*) {
  //ct3->numycells((int)gy->value());
//ct3->actualize();
}

Fl_Value_Input *gz2=(Fl_Value_Input *)0;

static void cb_gz2(Fl_Value_Input*, void*) {
  //ct3->numlevels((int)lv->value());
//ct3->actualize();
}

static void cb_2(Fl_Button*, void*) {
  //
  cgx1->value((real)gx1->value());
}

static void cb_21(Fl_Button*, void*) {
  //
  cgy1->value((real)gy1->value());
}

static void cb_22(Fl_Button*, void*) {
  //
  cgx2->value((real)gx2->value());
}

static void cb_23(Fl_Button*, void*) {
  //
  cgy2->value((real)gy2->value());
}

static void cb_24(Fl_Button*, void*) {
  //
  cgx1->value((real)gx1->value());
  cgy1->value((real)gy1->value());
  cgx2->value((real)gx2->value());
  cgy2->value((real)gy2->value());
}

Fl_Group *_sm_lm=(Fl_Group *)0;

Fl_Value_Input *cgx1=(Fl_Value_Input *)0;

static void cb_cgx1(Fl_Value_Input*, void*) {
  //
  ct3->set_submesh_limits(0,0,(real)cgx1->value());
  
  if((bool)_chk_rf->value()){
    ct3->normalize_submesh_limits();
    ct3->graph_cb();
  };
}

Fl_Value_Input *cgy1=(Fl_Value_Input *)0;

static void cb_cgy1(Fl_Value_Input*, void*) {
  //
  ct3->set_submesh_limits(1,0,(real)cgy1->value());
  
  if((bool)_chk_rf->value()){
    ct3->normalize_submesh_limits();
    ct3->graph_cb();
  };
}

static void cb_z1(Fl_Value_Input*, void*) {
  //ct3->numlevels((int)lv->value());
//ct3->actualize();
}

Fl_Value_Input *cgx2=(Fl_Value_Input *)0;

static void cb_cgx2(Fl_Value_Input*, void*) {
  //
  ct3->set_submesh_limits(0,1,(real)cgx2->value());
  
  if((bool)_chk_rf->value()){
    ct3->normalize_submesh_limits();
    ct3->graph_cb();
  };
}

Fl_Value_Input *cgy2=(Fl_Value_Input *)0;

static void cb_cgy2(Fl_Value_Input*, void*) {
  //
  ct3->set_submesh_limits(1,1,(real)cgy2->value());
  
  if((bool)_chk_rf->value()){
    ct3->normalize_submesh_limits();
    ct3->graph_cb();
  };
}

static void cb_z2(Fl_Value_Input*, void*) {
  //ct3->numlevels((int)lv->value());
//ct3->actualize();
}

static void cb_(Fl_Button*, void*) {
  //
  ct3->set_submesh_limits(0,0,(real)cgx1->value());
  ct3->set_submesh_limits(0,1,(real)cgx2->value());
  ct3->set_submesh_limits(1,0,(real)cgy1->value());
  ct3->set_submesh_limits(1,1,(real)cgy2->value());
  ct3->normalize_submesh_limits();
  _save_as->activate();
  ct3->graph_cb();
}

static const char *idata_submesh[] = {
"44 24 10 1",
" \tc None",
".\tc #F1661A",
"+\tc #000000",
"@\tc #F4F112",
"#\tc #12F417",
"$\tc #FFFFFF",
"%\tc #1247F4",
"&\tc #E112F4",
"*\tc #F41257",
"=\tc #F45D12",
".....++@@@@@@@@@@@@@@@@@@@@@@@@@@@@@+++.....",
"....++@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@++++..",
"....+@@@@@@@+++++++++++++@@@@@@@@@@@@@@@@++.",
"...++@@@@++++###########++++++++@@@@@@@@@@@+",
"..++@@@$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$@@@+",
".++@@@@$+########################++@@@@$@@@@",
"++@@@@@$+####+++++++++############++@@@$@@@@",
"+@@@@@@$####+%%%%%%%%%+++###########+@@$@@@@",
"+@@@@@@$###++%%%%%%%%%%%%+++########++@$@@@@",
"@@@@@@@$##++%%%%%%%%%%%%%%%%+++#######+$@@@@",
"@@@@@@+$##+%%%%%%%%+++++++%%%%+++#####+$@@@@",
"@@@@@@+$##+%%%%%++++&&&&&++++%%%+#####+$@@@@",
"@@@@@+#$#++%%%%++&&&&&&&&&&&&++%++#####$@@@@",
"@@@+++#$#+%%%%++&&&&&++&&&&&&&+%%++####$@@@@",
"++++###$#+%%%++&&&&++*+++&&&&&++%%+####$@@@@",
"#######$++%%%+&&&&++****++&&&&&+%%+####$@@@@",
"#######$+%%++&&&&+*******+&&&&&+%%+####$@@@@",
"######+$+%%+&&&&++*******+&&&&&+%%+####$@@@+",
"+++++++$%%++&&&&+********+&&&&++%%+####$@@@+",
"%%%%%%%$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$@@++",
"%%%%%%%%%+&&&&&&+*******+&&&&++%++####+@@@+=",
"%%%%%%%%++&&&&&&+******++&&&++ ++####++@@++=",
"%%%%%%%%+&&&&&&&++++++++&&+++ ++####++@@@+==",
"%%%%%%%+&&&&&&&&&&&&&&&&++    +#####+@@@@+=="
};
static Fl_Pixmap image_submesh(idata_submesh);

Fl_Button *_save_as=(Fl_Button *)0;

static void cb__save_as(Fl_Button*, void*) {
  // Save a XYZ file
  //char * file_;
  Fl_File_Chooser *p = new Fl_File_Chooser(directory_,"*.xyz",2,"Save file as");
  p->directory(directory_);
  p->show();
  while( p->visible())
     Fl::wait();
  if(p->value()){
    //file_ = (char*)p->value();
    //cout<<"File Name = "<<file_<<endl;
    strcpy(submesh_file_,(char*)p->value());
    strcpy(directory_,(char*)p->directory());
    f = (char*)fl_filename_name(p->value());
    strcpy(submesh_file_name_,(char*)f);
    //
    cout<<"File Name = "<<submesh_file_<<endl;
    cout<<"Dir Name = "<<directory_<<endl;
    ct3->save_xyz_submesh(submesh_file_);
    rs->activate();
  };
}

Fl_Button *rs=(Fl_Button *)0;

static void cb_rs(Fl_Button*, void*) {
  // Load the actual submesh
  strcpy(file_,submesh_file_);
  strcpy(file_name_,submesh_file_name_);
  load_xyz_data();
  build_graph();
}

Fl_Check_Button *_chk_cut=(Fl_Check_Button *)0;

static void cb__chk_cut(Fl_Check_Button*, void*) {
  //
  if((bool)_chk_cut->value()){
    _sm_lm->activate();
    ct3->graph_cut((bool)_chk_cut->value());
    ct3->graph_cb();
  }else{
    _sm_lm->deactivate();
    ct3->graph_cut((bool)_chk_cut->value());
  }
  //ct3->redraw();
}

Fl_Check_Button *_chk_rf=(Fl_Check_Button *)0;

int main(int argc, char **argv) {
  // initialize variables
    strcpy(file_name_,"noname.xyz");
    strcpy(directory_,"./");
  { _wcnt = new Fl_Double_Window(770, 510, "Contour");
    { ct3 = new fl_gl_contour(172, 3, 593, 472, "No hay OpenGL presente");
      ct3->box(FL_THIN_DOWN_BOX);
      ct3->color(FL_BACKGROUND_COLOR);
      ct3->selection_color(FL_BACKGROUND_COLOR);
      ct3->labeltype(FL_NORMAL_LABEL);
      ct3->labelfont(0);
      ct3->labelsize(14);
      ct3->labelcolor(FL_FOREGROUND_COLOR);
      ct3->align(Fl_Align(FL_ALIGN_CENTER));
      ct3->when(FL_WHEN_RELEASE);
      Fl_Group::current()->resizable(ct3);
      //ct3->cntData(d);
    } // fl_gl_contour* ct3
    { Fl_Group* o = new Fl_Group(5, 480, 760, 25);
      o->box(FL_THIN_DOWN_BOX);
      { sc = new Fl_Slider(631, 485, 130, 12, "Scale");
        sc->type(1);
        sc->step(0.02);
        sc->value(1);
        sc->callback((Fl_Callback*)cb_sc);
        sc->align(Fl_Align(FL_ALIGN_LEFT));
      } // Fl_Slider* sc
      { _z = new Fl_Slider(430, 485, 130, 12, "Zoom");
        _z->type(1);
        _z->step(0.02);
        _z->value(0.8);
        _z->callback((Fl_Callback*)cb__z);
        _z->align(Fl_Align(FL_ALIGN_LEFT));
      } // Fl_Slider* _z
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(5, 5, 166, 470);
      o->box(FL_THIN_DOWN_BOX);
      { Fl_Group* o = new Fl_Group(10, 6, 157, 49);
        { Fl_Button* o = new Fl_Button(13, 7, 43, 28, "@fileopen");
          o->tooltip("open a XYZ data file");
          o->box(FL_THIN_UP_BOX);
          o->color((Fl_Color)17);
          o->labelsize(19);
          o->labelcolor((Fl_Color)51);
          o->callback((Fl_Callback*)cb_fileopen);
        } // Fl_Button* o
        { button_data = new Fl_Button(67, 7, 43, 28);
          button_data->tooltip("load data");
          button_data->box(FL_THIN_UP_BOX);
          button_data->color((Fl_Color)26);
          button_data->image(image_data);
          button_data->callback((Fl_Callback*)cb_button_data);
          button_data->deactivate();
        } // Fl_Button* button_data
        { button_graph = new Fl_Button(121, 7, 43, 28);
          button_graph->tooltip("compute contourand color  maps");
          button_graph->box(FL_THIN_UP_BOX);
          button_graph->color((Fl_Color)3);
          button_graph->image(image_contour);
          button_graph->callback((Fl_Callback*)cb_button_graph);
          button_graph->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
          button_graph->deactivate();
        } // Fl_Button* button_graph
        { _xyz_file = new Fl_Input(12, 35, 155, 20);
          _xyz_file->value("noname.xyz");
        } // Fl_Input* _xyz_file
        o->end();
      } // Fl_Group* o
      { control_panel = new Fl_Tabs(5, 63, 165, 401);
        control_panel->deactivate();
        { Fl_Group* o = new Fl_Group(8, 79, 156, 381, "Settings");
          { Fl_Group* o = new Fl_Group(8, 84, 151, 87);
            o->box(FL_THIN_DOWN_BOX);
            { Fl_Choice* o = ip = new Fl_Choice(11, 104, 142, 21, "Interpolation:");
              ip->tooltip("select interpolation");
              ip->down_box(FL_BORDER_BOX);
              ip->callback((Fl_Callback*)cb_ip);
              ip->align(Fl_Align(FL_ALIGN_TOP_LEFT));
              ip->menu(menu_ip);
              o->value(0);
            } // Fl_Choice* ip
            { Fl_Choice* o = pt = new Fl_Choice(11, 144, 142, 20, "Palette:");
              pt->tooltip("select palette");
              pt->down_box(FL_BORDER_BOX);
              pt->callback((Fl_Callback*)cb_pt);
              pt->align(Fl_Align(FL_ALIGN_TOP_LEFT));
              pt->menu(menu_pt);
              o->value(0);
            } // Fl_Choice* pt
            o->end();
          } // Fl_Group* o
          { Fl_Group* o = new Fl_Group(8, 190, 151, 30, "Grid");
            o->box(FL_THIN_DOWN_BOX);
            o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
            { gx = new Fl_Value_Input(28, 195, 28, 20, "X:");
              gx->tooltip("Grid on X direction");
              gx->minimum(10);
              gx->maximum(500);
              gx->step(1);
              gx->value(40);
              gx->callback((Fl_Callback*)cb_gx);
            } // Fl_Value_Input* gx
            { gy = new Fl_Value_Input(77, 195, 28, 20, "Y:");
              gy->tooltip("Grid on Y direction");
              gy->minimum(10);
              gy->maximum(500);
              gy->step(1);
              gy->value(40);
              gy->callback((Fl_Callback*)cb_gy);
            } // Fl_Value_Input* gy
            { lv = new Fl_Value_Input(125, 195, 28, 20, "Z:");
              lv->tooltip("Grid on Z direction");
              lv->minimum(10);
              lv->maximum(500);
              lv->step(1);
              lv->value(30);
              lv->callback((Fl_Callback*)cb_lv);
            } // Fl_Value_Input* lv
            o->end();
          } // Fl_Group* o
          { Fl_Group* o = new Fl_Group(8, 236, 151, 47, "Display");
            o->box(FL_THIN_DOWN_BOX);
            o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
            { _bx_d = new Fl_Check_Button(16, 241, 65, 20, "Box  ");
              _bx_d->tooltip("Shows bounding box");
              _bx_d->down_box(FL_DOWN_BOX);
              _bx_d->callback((Fl_Callback*)cb__bx_d);
            } // Fl_Check_Button* _bx_d
            { _ch_pl = new Fl_Check_Button(82, 241, 65, 20, "Palette");
              _ch_pl->tooltip("shows palette");
              _ch_pl->down_box(FL_DOWN_BOX);
              _ch_pl->callback((Fl_Callback*)cb__ch_pl);
            } // Fl_Check_Button* _ch_pl
            { _ch_d = new Fl_Check_Button(16, 261, 65, 20, "Data ");
              _ch_d->tooltip("shows loaded data points");
              _ch_d->down_box(FL_DOWN_BOX);
              _ch_d->callback((Fl_Callback*)cb__ch_d);
            } // Fl_Check_Button* _ch_d
            { _ch_sp = new Fl_Check_Button(82, 261, 65, 20, "Points");
              _ch_sp->tooltip("shiows interpolated points");
              _ch_sp->down_box(FL_DOWN_BOX);
              _ch_sp->callback((Fl_Callback*)cb__ch_sp);
            } // Fl_Check_Button* _ch_sp
            o->end();
          } // Fl_Group* o
          { Fl_Group* o = new Fl_Group(8, 300, 151, 54, "Graph");
            o->box(FL_THIN_DOWN_BOX);
            o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
            { _btt_2d = new Fl_Check_Button(15, 305, 41, 20, "2D");
              _btt_2d->tooltip("shows 2D graph");
              _btt_2d->down_box(FL_DOWN_BOX);
              _btt_2d->value(1);
              _btt_2d->callback((Fl_Callback*)cb__btt_2d);
            } // Fl_Check_Button* _btt_2d
            { _btt_3d = new Fl_Check_Button(15, 330, 41, 20, "3D");
              _btt_3d->tooltip("shows 3D graph");
              _btt_3d->down_box(FL_DOWN_BOX);
              _btt_3d->value(1);
              _btt_3d->callback((Fl_Callback*)cb__btt_3d);
            } // Fl_Check_Button* _btt_3d
            { Fl_Choice* o = g2d = new Fl_Choice(58, 304, 95, 20);
              g2d->tooltip("select graph type");
              g2d->down_box(FL_BORDER_BOX);
              g2d->callback((Fl_Callback*)cb_g2d);
              g2d->align(Fl_Align(FL_ALIGN_TOP_LEFT));
              g2d->menu(menu_g2d);
              o->value(0);
            } // Fl_Choice* g2d
            { Fl_Choice* o = g3d = new Fl_Choice(58, 328, 95, 20);
              g3d->tooltip("select graph type");
              g3d->down_box(FL_BORDER_BOX);
              g3d->callback((Fl_Callback*)cb_g3d);
              g3d->align(Fl_Align(FL_ALIGN_TOP_LEFT));
              g3d->menu(menu_g3d);
              o->value(0);
            } // Fl_Choice* g3d
            o->end();
          } // Fl_Group* o
          { Fl_Group* o = new Fl_Group(8, 372, 151, 53, "Duplicate");
            o->box(FL_THIN_DOWN_BOX);
            o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
            { _chk_avg = new Fl_Check_Button(9, 376, 78, 20, "Average");
              _chk_avg->tooltip("Make and average with duplicate data");
              _chk_avg->down_box(FL_DOWN_BOX);
              _chk_avg->value(1);
              _chk_avg->callback((Fl_Callback*)cb__chk_avg);
            } // Fl_Check_Button* _chk_avg
            { _chk_del = new Fl_Check_Button(89, 376, 63, 20, "Delete");
              _chk_del->tooltip("Remove duplicate data");
              _chk_del->down_box(FL_DOWN_BOX);
              _chk_del->callback((Fl_Callback*)cb__chk_del);
            } // Fl_Check_Button* _chk_del
            { _tol = new Fl_Value_Input(78, 401, 78, 20, "tolerance:");
              _tol->tooltip("Tolerance radius");
              _tol->minimum(1e-09);
              _tol->maximum(1e+09);
              _tol->step(1e-06);
              _tol->value(0.001);
              _tol->callback((Fl_Callback*)cb__tol);
            } // Fl_Value_Input* _tol
            o->end();
          } // Fl_Group* o
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(8, 79, 157, 384, "Mesh");
          o->hide();
          { Fl_Group* o = new Fl_Group(11, 102, 153, 133, "Mesh limits:");
            o->box(FL_THIN_DOWN_BOX);
            o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
            { gx1 = new Fl_Value_Input(36, 107, 125, 20, "x1:");
              gx1->minimum(-1e+09);
              gx1->maximum(1e+09);
              gx1->step(0.001);
              gx1->callback((Fl_Callback*)cb_gx1);
            } // Fl_Value_Input* gx1
            { gy1 = new Fl_Value_Input(36, 127, 125, 20, "y1:");
              gy1->minimum(-1e+09);
              gy1->maximum(1e+09);
              gy1->step(0.001);
              gy1->callback((Fl_Callback*)cb_gy1);
            } // Fl_Value_Input* gy1
            { gz1 = new Fl_Value_Input(36, 147, 125, 20, "z1:");
              gz1->minimum(-1e+09);
              gz1->maximum(1e+09);
              gz1->step(0.001);
              gz1->callback((Fl_Callback*)cb_gz1);
              gz1->deactivate();
            } // Fl_Value_Input* gz1
            { gx2 = new Fl_Value_Input(36, 170, 125, 20, "x2:");
              gx2->minimum(-1e+09);
              gx2->maximum(1e+09);
              gx2->step(0.001);
              gx2->callback((Fl_Callback*)cb_gx2);
            } // Fl_Value_Input* gx2
            { gy2 = new Fl_Value_Input(36, 190, 125, 20, "y2:");
              gy2->minimum(-1e+09);
              gy2->maximum(1e+09);
              gy2->step(0.001);
              gy2->callback((Fl_Callback*)cb_gy2);
            } // Fl_Value_Input* gy2
            { gz2 = new Fl_Value_Input(36, 210, 125, 20, "z2:");
              gz2->minimum(-1e+09);
              gz2->maximum(1e+09);
              gz2->step(0.001);
              gz2->callback((Fl_Callback*)cb_gz2);
              gz2->deactivate();
            } // Fl_Value_Input* gz2
            o->end();
          } // Fl_Group* o
          { Fl_Group* o = new Fl_Group(10, 236, 155, 21);
            { Fl_Button* o = new Fl_Button(10, 236, 20, 20, "@2>");
              o->callback((Fl_Callback*)cb_2);
            } // Fl_Button* o
            { Fl_Button* o = new Fl_Button(30, 236, 21, 20, "@2>");
              o->callback((Fl_Callback*)cb_21);
            } // Fl_Button* o
            { Fl_Button* o = new Fl_Button(51, 236, 20, 20, "@2>");
              o->deactivate();
            } // Fl_Button* o
            { Fl_Button* o = new Fl_Button(104, 236, 20, 20, "@2>");
              o->callback((Fl_Callback*)cb_22);
            } // Fl_Button* o
            { Fl_Button* o = new Fl_Button(124, 236, 21, 20, "@2>");
              o->callback((Fl_Callback*)cb_23);
            } // Fl_Button* o
            { Fl_Button* o = new Fl_Button(145, 236, 20, 20, "@2>");
              o->deactivate();
            } // Fl_Button* o
            { Fl_Button* o = new Fl_Button(72, 236, 29, 20, "@2>");
              o->callback((Fl_Callback*)cb_24);
            } // Fl_Button* o
            o->end();
          } // Fl_Group* o
          { _sm_lm = new Fl_Group(11, 273, 153, 170, "Submesh:");
            _sm_lm->box(FL_THIN_DOWN_BOX);
            _sm_lm->align(Fl_Align(FL_ALIGN_TOP_LEFT));
            _sm_lm->deactivate();
            { cgx1 = new Fl_Value_Input(36, 279, 125, 20, "x1:");
              cgx1->minimum(-1e+09);
              cgx1->maximum(1e+09);
              cgx1->step(0.001);
              cgx1->callback((Fl_Callback*)cb_cgx1);
            } // Fl_Value_Input* cgx1
            { cgy1 = new Fl_Value_Input(36, 299, 125, 20, "y1:");
              cgy1->minimum(-1e+09);
              cgy1->maximum(1e+09);
              cgy1->step(0.001);
              cgy1->callback((Fl_Callback*)cb_cgy1);
            } // Fl_Value_Input* cgy1
            { Fl_Value_Input* o = new Fl_Value_Input(36, 319, 125, 20, "z1:");
              o->minimum(-1e+09);
              o->maximum(1e+09);
              o->step(0.001);
              o->callback((Fl_Callback*)cb_z1);
              o->deactivate();
            } // Fl_Value_Input* o
            { cgx2 = new Fl_Value_Input(36, 342, 125, 20, "x2:");
              cgx2->minimum(-1e+09);
              cgx2->maximum(1e+09);
              cgx2->step(0.001);
              cgx2->callback((Fl_Callback*)cb_cgx2);
            } // Fl_Value_Input* cgx2
            { cgy2 = new Fl_Value_Input(36, 362, 125, 20, "y2:");
              cgy2->minimum(-1e+09);
              cgy2->maximum(1e+09);
              cgy2->step(0.001);
              cgy2->callback((Fl_Callback*)cb_cgy2);
            } // Fl_Value_Input* cgy2
            { Fl_Value_Input* o = new Fl_Value_Input(36, 382, 125, 20, "z2:");
              o->minimum(-1e+09);
              o->maximum(1e+09);
              o->step(0.001);
              o->callback((Fl_Callback*)cb_z2);
              o->deactivate();
            } // Fl_Value_Input* o
            { Fl_Button* o = new Fl_Button(15, 410, 43, 28);
              o->tooltip("cut submesh");
              o->box(FL_THIN_UP_BOX);
              o->image(image_submesh);
              o->callback((Fl_Callback*)cb_);
            } // Fl_Button* o
            { _save_as = new Fl_Button(66, 410, 43, 28, "@filesaveas");
              _save_as->tooltip("Save highlighted the submesh");
              _save_as->box(FL_THIN_UP_BOX);
              _save_as->color((Fl_Color)26);
              _save_as->callback((Fl_Callback*)cb__save_as);
              _save_as->deactivate();
            } // Fl_Button* _save_as
            { rs = new Fl_Button(117, 410, 42, 28, "@reload");
              rs->tooltip("load the new submesh");
              rs->box(FL_THIN_UP_BOX);
              rs->color((Fl_Color)26);
              rs->labelsize(20);
              rs->labelcolor((Fl_Color)239);
              rs->callback((Fl_Callback*)cb_rs);
              rs->deactivate();
            } // Fl_Button* rs
            _sm_lm->end();
          } // Fl_Group* _sm_lm
          { Fl_Group* o = new Fl_Group(10, 438, 155, 25);
            { _chk_cut = new Fl_Check_Button(10, 442, 80, 20, "Submesh");
              _chk_cut->tooltip("Display cutting limits");
              _chk_cut->down_box(FL_DOWN_BOX);
              _chk_cut->callback((Fl_Callback*)cb__chk_cut);
              _chk_cut->deactivate();
            } // Fl_Check_Button* _chk_cut
            { _chk_rf = new Fl_Check_Button(92, 443, 70, 20, "Refresh");
              _chk_rf->tooltip("Display and refresh cutting limits automaticly");
              _chk_rf->down_box(FL_DOWN_BOX);
            } // Fl_Check_Button* _chk_rf
            o->end();
          } // Fl_Group* o
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(8, 79, 156, 381, "Color");
          o->hide();
          o->end();
        } // Fl_Group* o
        control_panel->end();
      } // Fl_Tabs* control_panel
      { Fl_Group* o = new Fl_Group(5, 467, 166, 5);
        o->end();
        Fl_Group::current()->resizable(o);
      } // Fl_Group* o
      o->end();
    } // Fl_Group* o
    _wcnt->end();
  } // Fl_Double_Window* _wcnt
  _wcnt->show(argc, argv);
  return Fl::run();
}

void load_xyz_data() {
  //
    char _title[256];
    d.clear();
    d.read_file((char*)file_,0,0);
    ct3->set_input_data(d);
    ct3->actualize();
    
    // Name bar
    sprintf(_title,"Contour - %s",file_name_);
    _wcnt->label(_title);
    
    gx1->value(ct3->get_x_min());
    gx2->value(ct3->get_x_max());
    gy1->value(ct3->get_y_min());
    gy2->value(ct3->get_y_max());
    gz1->value(ct3->get_z_min());
    gz2->value(ct3->get_z_max());
    
    cgx1->value(ct3->get_x_min());
    cgx2->value(ct3->get_x_max());
    cgy1->value(ct3->get_y_min());
    cgy2->value(ct3->get_y_max());
    //cgz1->value(ct3->get_z_min());
    //cgz2->value(ct3->get_z_max());
}

void build_graph() {
  //
  //
    ct3->set_number_x_grid((int)gx->value());
    ct3->set_number_y_grid((int)gy->value());
    ct3->set_number_z_grid((int)lv->value());
    ct3->graph_cb();
}
